// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model
model User {
  user_id       Int       @id @default(autoincrement())
  email         String    @unique
  password_hash String
  role          Role      @default(student)
  first_name    String?
  last_name     String?
  phone         String?
  is_active     Boolean   @default(true)
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  student          Student?   @relation("UserToStudent")
  employee         Employee?  @relation("UserToEmployee")
  attendance_marked Attendance[] @relation("UserToAttendance")
  courses          Course[]   @relation("UserToCourse")
  expenses         Expense[]  @relation("UserToExpense")
  leaves           Leave[]    @relation("UserToLeave")

  @@index([email])
  @@index([role])
  @@index([is_active])
}

// Student model
model Student {
  student_id       Int       @id @default(autoincrement())
  user_id          Int       @unique
  student_number   String    @unique
  program          String?
  year_level       Int?
  enrollment_date  DateTime?
  graduation_date  DateTime?
  gpa              Decimal?  @db.Decimal(3, 2)
  status           StudentStatus @default(active)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  user       User      @relation("UserToStudent", fields: [user_id], references: [user_id])
  attendance Attendance[]
  grades     Grade[]
  invoices   Invoice[]

  @@index([student_number])
  @@index([program])
  @@index([status])
  @@index([year_level])
}

// Course model
model Course {
  course_id     Int       @id @default(autoincrement())
  name          String
  code          String    @unique
  description   String?
  credits       Int
  instructor_id Int?
  semester      String?
  year          Int?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  instructor User?     @relation("UserToCourse", fields: [instructor_id], references: [user_id])
  attendance Attendance[]
  grades     Grade[]
  exams      Exam[]

  @@index([code])
  @@index([instructor_id])
  @@index([is_active])
  @@index([semester, year])
}

// Attendance model
model Attendance {
  attendance_id Int       @id @default(autoincrement())
  student_id    Int
  course_id     Int
  date          DateTime  @db.Date
  status        AttendanceStatus
  notes         String?
  marked_by     Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  student Student   @relation(fields: [student_id], references: [student_id])
  course  Course    @relation(fields: [course_id], references: [course_id])
  marker  User?     @relation("UserToAttendance", fields: [marked_by], references: [user_id])

  @@index([student_id])
  @@index([course_id])
  @@index([date])
  @@index([status])
  @@unique([student_id, course_id, date])
}

// Grade model
model Grade {
  grade_id   Int      @id @default(autoincrement())
  student_id Int
  course_id  Int
  exam_id    Int?
  score      Decimal  @db.Decimal(5, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  student Student @relation(fields: [student_id], references: [student_id])
  course  Course  @relation(fields: [course_id], references: [course_id])
  exam    Exam?   @relation(fields: [exam_id], references: [exam_id])
}

// Exam model
model Exam {
  exam_id    Int      @id @default(autoincrement())
  course_id  Int
  name       String
  date       DateTime @db.Date
  total_marks Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  course Course @relation(fields: [course_id], references: [course_id])
  grades Grade[]
}

// Invoice model
model Invoice {
  invoice_id Int      @id @default(autoincrement())
  student_id Int
  amount     Decimal  @db.Decimal(10, 2)
  due_date   DateTime @db.Date
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  student Student @relation(fields: [student_id], references: [student_id])
}

// Expense model
model Expense {
  expense_id   Int      @id @default(autoincrement())
  amount       Decimal  @db.Decimal(10, 2)
  description  String
  category     String
  date         DateTime @db.Date
  approved_by  Int?
  approved_at  DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  approver User? @relation("UserToExpense", fields: [approved_by], references: [user_id])
}

// Leave model
model Leave {
  leave_id     Int      @id @default(autoincrement())
  employee_id  Int
  start_date   DateTime @db.Date
  end_date     DateTime @db.Date
  type         String
  reason       String
  status       String   @default("pending")
  approved_by  Int?
  approved_at  DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employee_id], references: [employee_id])
  approver User?    @relation("UserToLeave", fields: [approved_by], references: [user_id])
}

// Campaign model
model Campaign {
  campaign_id Int      @id @default(autoincrement())
  name        String
  description String?
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  budget      Decimal  @db.Decimal(10, 2)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// Employee model
model Employee {
  employee_id   Int      @id @default(autoincrement())
  user_id       Int      @unique
  employee_code String   @unique
  department    String
  position      String
  hire_date     DateTime @db.Date
  manager_id    Int?
  salary        Decimal  @db.Decimal(10, 2)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user       User      @relation("UserToEmployee", fields: [user_id], references: [user_id])
  manager    Employee? @relation("EmployeeToManager", fields: [manager_id], references: [employee_id])
  subordinates Employee[] @relation("EmployeeToManager")
  leaves     Leave[]
  assets     Asset[]
  payrolls   Payroll[]
}

// Asset model
model Asset {
  asset_id     Int      @id @default(autoincrement())
  name         String
  description  String?
  category     String
  serial_number String?  @unique
  purchase_date DateTime @db.Date
  purchase_cost Decimal  @db.Decimal(10, 2)
  assigned_to  Int?
  status       String   @default("active")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  assignee Employee? @relation(fields: [assigned_to], references: [employee_id])
}

// Payroll model
model Payroll {
  payroll_id   Int      @id @default(autoincrement())
  employee_id  Int
  salary_month DateTime @db.Date
  basic_salary Decimal  @db.Decimal(10, 2)
  allowances   Decimal?  @db.Decimal(10, 2)
  deductions   Decimal?  @db.Decimal(10, 2)
  net_salary   Decimal  @db.Decimal(10, 2)
  paid_at      DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employee_id], references: [employee_id])
}

// Enums
enum Role {
  admin
  student
  staff
}

enum StudentStatus {
  active
  inactive
  graduated
  suspended
}

enum AttendanceStatus {
  present
  absent
  late
  excused
}